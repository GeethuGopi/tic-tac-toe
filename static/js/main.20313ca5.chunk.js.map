{"version":3,"sources":["components/Icon.js","App.js","reportWebVitals.js","index.js"],"names":["Icon","name","className","itemArray","Array","fill","App","useState","isCross","setIsCross","winMessage","setWinMessage","changeItem","itemNumber","toast","type","Container","position","Row","Col","md","Button","color","block","onClick","map","item","index","Card","CardBody","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.20313ca5.chunk.js","sourcesContent":["import React from 'react';\r\nimport {FaTimes,FaPen,FaRegCircle} from \"react-icons/fa\"\r\n\r\nconst Icon = ({name}) => {\r\n    \r\n       switch (name) {\r\n            case 'circle':\r\n                return <FaRegCircle className ='icons'/>              \r\n            case 'cross':\r\n                return <FaTimes className ='icons'/>                                \r\n            default:\r\n                return <FaPen className ='icons'/>\r\n       }\r\n    \r\n}\r\n\r\nexport default Icon;","import React, { useState } from 'react';\r\n\r\nimport Icon from './components/Icon';\r\n\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport {Card, CardBody, Container, Button, Col, Row} from \"reactstrap\"\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport './App.css';\r\n\r\nconst itemArray = new Array(9).fill('empty')\r\n\r\nconst App = ()=> {\r\n  const [isCross, setIsCross] = useState(false);\r\n  const [winMessage, setWinMessage] = useState(\"\");\r\n\r\n  const reloadGame = () => {\r\n    setIsCross(false);\r\n    setWinMessage (\"\");\r\n    itemArray.fill('empty',0,9);\r\n  };\r\n\r\n  const checkIsWinner = () =>{\r\n    if (itemArray[0]===itemArray[1] && \r\n      itemArray[0]===itemArray[2]&&\r\n      itemArray[0]!==\"empty\"\r\n      ) {\r\n        setWinMessage(`${itemArray[0]} wins`)\r\n      } else if (\r\n        itemArray[3] !== \"empty\" &&\r\n        itemArray[3] === itemArray[4] &&\r\n        itemArray[4]=== itemArray[5]\r\n      ) {\r\n        setWinMessage(`${itemArray[3]} won`);\r\n      }else if (\r\n        itemArray[6]!== \"empty\" &&\r\n        itemArray[6]===itemArray[7] &&\r\n        itemArray[7]=== itemArray[8]\r\n      ){\r\n        setWinMessage(`${itemArray[6]} won`)\r\n      }else if(\r\n      itemArray[0]!== \"empty\" &&\r\n      itemArray[0]=== itemArray[3]&&\r\n      itemArray[3] === itemArray[6]\r\n      ) {\r\n        setWinMessage(`${itemArray[0]} wins`)\r\n      }else if(\r\n        itemArray[1]!== \"empty\" &&\r\n        itemArray[1]===itemArray[4] &&\r\n        itemArray[4]===itemArray[7]\r\n      ){\r\n        setWinMessage(`${itemArray[1]} won`)\r\n      }else if(\r\n        itemArray[2]!==\"empty\"&&\r\n        itemArray[2]===itemArray[5]&&\r\n        itemArray[5]===itemArray[8]\r\n      ){\r\n        setWinMessage(`${itemArray[2]} won`)\r\n      }else if(\r\n        itemArray[0]!==\"empty\"&&\r\n        itemArray[0]===itemArray[4]&&\r\n        itemArray[4]===itemArray[8]\r\n      ){\r\n        setWinMessage(`${itemArray[0]} won`)\r\n      }else if(\r\n        itemArray[2]!==\"empty\"&&\r\n        itemArray[2]===itemArray[4]&&\r\n        itemArray[4]===itemArray[6]\r\n      ){\r\n        setWinMessage(`${itemArray[2]} won`)\r\n      }\r\n    };\r\n\r\n  const changeItem = itemNumber =>{\r\n    if(winMessage){\r\n      return toast (winMessage, { type : \"success\" });\r\n    }\r\n\r\n    if(itemArray[itemNumber] ===\"empty\"){\r\n      itemArray[itemNumber] = isCross ? \"cross\" : \"circle\"\r\n      setIsCross(!isCross)\r\n    } else {\r\n      return toast(\"already filled\", {type: \"error\"} )\r\n    }\r\n    checkIsWinner();\r\n  }\r\n  return (\r\n    <Container className = \"p-5\">\r\n      <ToastContainer position = \"bottom-center\" />\r\n        <Row>\r\n          <Col md={6} className=\"offset-md-3\">\r\n            {winMessage ? (\r\n              <div className= \"mb-2 mt-2\">\r\n                <h1 className=\"text-success text-uppercase text-center\">\r\n                  {winMessage}\r\n                </h1>\r\n                <Button color=\"success\" block onClick={reloadGame}>Reload the Game</Button>\r\n              </div>\r\n            ):(\r\n              <h1 className=\"text-center text-warning\">\r\n                {isCross ? \"Cross\" : \"Circle\"} turns\r\n              </h1>\r\n            )}\r\n            <div className=\"grid\">\r\n              {itemArray.map((item,index) => (\r\n                  <Card color=\"warning\" onClick={() => changeItem(index)}>\r\n                    <CardBody className=\"box\">\r\n                      <Icon name={item} />\r\n                    </CardBody>\r\n                  </Card>\r\n              ))}\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}